{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "User Management API",
		"description": "Complete API collection for User Management System with location-based features using OpenWeatherMap integration.\n\n**Base URL:** http://localhost:8080\n\n**Features:**\n- CRUD operations for users\n- Automatic location data fetching from zip codes\n- Search functionality by zip code\n- Error handling and validation\n\n**User Data Structure:**\n- id (auto-generated)\n- name (string)\n- zipCode (string)\n- latitude (number, from OpenWeatherMap)\n- longitude (number, from OpenWeatherMap)\n- timezone (number, from OpenWeatherMap)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Welcome",
			"item": [
				{
					"name": "Get Welcome Message",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Returns a welcome message from the RentRedi interview API."
					},
					"response": []
				}
			],
			"description": "Basic welcome endpoint to test API connectivity."
		},
		{
			"name": "Users CRUD",
			"item": [
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"zipCode\": \"10001\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user with name and zip code. Automatically fetches latitude, longitude, and timezone from OpenWeatherMap API.\n\n**Required Fields:**\n- name (string): User's full name\n- zipCode (string): Valid US zip code\n\n**Response:**\n- Returns created user object with all fields including location data\n- Status: 201 Created on success\n- Status: 400 Bad Request if required fields missing\n- Status: 500 Internal Server Error if zip code is invalid"
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Retrieves all users in the system.\n\n**Response:**\n- Returns array of user objects\n- Empty array if no users exist\n- Status: 200 OK"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						},
						"description": "Retrieves a specific user by their ID.\n\n**Path Parameters:**\n- id (integer): User ID\n\n**Response:**\n- Returns user object if found\n- Status: 200 OK on success\n- Status: 404 Not Found if user doesn't exist"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane Doe\",\n    \"zipCode\": \"90210\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						},
						"description": "Updates an existing user. If zip code changes, automatically re-fetches location data from OpenWeatherMap.\n\n**Path Parameters:**\n- id (integer): User ID to update\n\n**Optional Body Fields:**\n- name (string): New name for the user\n- zipCode (string): New zip code (triggers location data refresh)\n\n**Response:**\n- Returns updated user object\n- Status: 200 OK on success\n- Status: 404 Not Found if user doesn't exist\n- Status: 500 Internal Server Error if new zip code is invalid"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						},
						"description": "Deletes a user from the system.\n\n**Path Parameters:**\n- id (integer): User ID to delete\n\n**Response:**\n- Returns success message with deleted user data\n- Status: 200 OK on success\n- Status: 404 Not Found if user doesn't exist"
					},
					"response": []
				}
			],
			"description": "Complete CRUD operations for user management."
		},
		{
			"name": "Search & Filters",
			"item": [
				{
					"name": "Search Users by Zip Code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/search?zip=10001",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "zip",
									"value": "10001",
									"description": "Zip code to search for"
								}
							]
						},
						"description": "Searches for users by their zip code. Creative addition to the basic CRUD functionality.\n\n**Query Parameters:**\n- zip (string, required): Zip code to search for\n\n**Response:**\n- Returns array of users matching the zip code\n- Empty array if no users found\n- Status: 200 OK on success\n- Status: 400 Bad Request if zip parameter missing"
					},
					"response": []
				}
			],
			"description": "Additional search and filtering capabilities."
		},
		{
			"name": "Test Scenarios",
			"item": [
				{
					"name": "Test - Create User with Invalid Zip",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"zipCode\": \"INVALID\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Test error handling with invalid zip code. Should return 500 status with error message."
					},
					"response": []
				},
				{
					"name": "Test - Create User Missing Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Test validation with missing required fields. Should return 400 status with error message."
					},
					"response": []
				},
				{
					"name": "Test - Get Non-existent User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999"
							]
						},
						"description": "Test 404 error handling by requesting a non-existent user ID."
					},
					"response": []
				},
				{
					"name": "Test - Search Without Zip Parameter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/search",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"search"
							]
						},
						"description": "Test search endpoint without required zip parameter. Should return 400 status with error message."
					},
					"response": []
				}
			],
			"description": "Test scenarios for error handling and edge cases."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Base URL for the User Management API"
		}
	]
}
